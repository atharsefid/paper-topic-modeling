from __future__ import print_function
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
#from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Embedding, Input, Conv1D, MaxPooling1D, Flatten, Bidirectional
from keras.layers import LSTM
from keras.models import Model
from data_reader import *
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.layers import Embedding
from keras import backend as K
import numpy
numpy.random.seed(0)


EMBEDDING_DIM =100
reader = data()
MAX_SEQUENCE_LENGTH = reader.read_data()
titles = reader.titles
labels = reader.labels

tokenizer = Tokenizer() 
tokenizer.fit_on_texts(titles)
sequences = tokenizer.texts_to_sequences(titles)

word_index = tokenizer.word_index
print('Found %s unique tokens.' % len(word_index))

# read embeddings
embeddings_index = {}
f = open('pubmed.vec','r')
for line in f:
    values = line.split()
    word = values[0]
    coefs = np.asarray(values[1:], dtype='float32')
    embeddings_index[word] = coefs
f.close()

# make embedding matrix
embedding_matrix = np.zeros((len(word_index) + 1, EMBEDDING_DIM))
for word, i in word_index.items():
    embedding_vector = embeddings_index.get(word)
    if embedding_vector is not None:
        # words not found in embedding index will be all-zeros.
        embedding_matrix[i] = embedding_vector

print('Found %s word vectors.' % len(embeddings_index))

# build model
model = Sequential()
model.add(Embedding(len(word_index) + 1,                                                                
                            EMBEDDING_DIM,
                            weights=[embedding_matrix],
                            input_length=MAX_SEQUENCE_LENGTH,
                            trainable=False))
model.add(Bidirectional(LSTM(128, dropout=0.3, recurrent_dropout=0.3)))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['acc'])


# train test split
from sklearn.model_selection import StratifiedKFold
skf = StratifiedKFold(n_splits=10)
p = []
r = []
for train_index, test_index in skf.split(titles, labels):
    titles_train = np.array(titles)[train_index]
    titles_test = np.array(titles)[test_index]
    labels_train = np.array(labels)[train_index]
    labels_test = np.array(labels)[test_index]
    train_sequences = tokenizer.texts_to_sequences(titles_train)
    test_sequences = tokenizer.texts_to_sequences(titles_test)

    train = pad_sequences(train_sequences, maxlen=MAX_SEQUENCE_LENGTH)
    test = pad_sequences(test_sequences, maxlen=MAX_SEQUENCE_LENGTH)

    print('Shape of train data tensor:', train.shape)
    print('Shape of test data tensor:', test.shape)
    print('Shape of label tensor:', labels_train.shape)

    # happy learning!
    model.fit(train, labels_train, epochs=20, batch_size=128)
    score, acc = model.evaluate(test, labels_test, batch_size=1)
    pred = model.predict_classes(test, batch_size=1)
    precision = precision_score(labels_test, pred)
    recall = recall_score(labels_test, pred)
    p.append(precision)
    r.append(recall)
    print(' ')
    print('precision:', precision)
    print('recall:', recall)
    print('Test score:', score)
    print('Test accuracy:', acc)
print('total precision: ', sum(p)/len(p))
print('total recall:', sum(r)/len(r))

